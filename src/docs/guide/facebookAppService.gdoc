Reference @facebookAppService@ from any of your grails artefacts (controllers, domain, services...) to automatically inject it.

{code}
def facebookAppService
{code}


h3. User Id

You can check if current user has authorized your app and is authenticated by getting @userId@ from @facebookAppService@.
It will return @0@ if user is not authenticated (or if he has not authorized your app).

{code}
def userId = facebookAppService.getUserId()
if (userId) {
	println "User authenticated (id=${userId})"
} else {
	println "User not authenticated"
}
{code}

h3. User Access Token

If current user is authenticated, you can get his private @accessToken@ from @facebookAppService@.

If the app is running on a website, the access token will be automatically fetched in exchange for the authorization code returned by "Facebook JS SDK":http://developers.facebook.com/docs/reference/javascript/ signed request cookie. It is recommended to wrap this code in a try/catch block since external HTTP calls to _Facebook Graph API_ might be executed.

If the app is running on Facebook.com, the access token will be extracted from the signed request params (passed through the canvas iFrame).

{code}
try {
	String userAccessToken = facebookAppService.getUserAccessToken()
} catch (Exception exception) {
	// Something went wrong...
}
{code}

By default, after initial request, access token is stored in session scope for better performance: another reason to surround all your _Facebook Graph API_ calls in try/catch in order to catch expired/invalid access tokens.

